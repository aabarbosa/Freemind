/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package freemind.database.actions;

import freemind.database.DataBaseReader;
import freemind.database.DataBaseReader.ComboObject;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/**
 *
 * @author woo
 */
class CheckOutPanel extends JDialog
        implements ActionListener,
        PropertyChangeListener {

    private JComboBox mapCombo;
    private JPanel selectionPanel;
    private JOptionPane optionPane;
    private String btnString1 = "Enter";
    private String btnString2 = "Cancel";
    private String[] maps;
    private String selectedDate;

    /** Creates the reusable dialog. */
    public CheckOutPanel(Frame aFrame, String[] maps) {
        super(aFrame, true);
        setPreferredSize(new Dimension(300, 500));
        this.maps = maps;
        setTitle("Archive Checkout");
        init();
    };
    
    private void init() {

        mapCombo = new JComboBox(maps);

        //Create an array of the text and components to be displayed.
        String msgString1 = "Select a Map";
        String msgString2 = "Checkout";

        selectionPanel = createSelectionPanel();
        Object[] array = {msgString1, mapCombo, msgString2, selectionPanel};

        //Create an array specifying the number of dialog buttons
        //and their text.
        Object[] options = {btnString1, btnString2};

        //Create the JOptionPane.
        optionPane = new JOptionPane(array,
                JOptionPane.QUESTION_MESSAGE,
                JOptionPane.YES_NO_OPTION,
                null,
                options,
                options[0]);

        //Make this dialog display it.
        setContentPane(optionPane);

        //Handle window closing correctly.
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent we) {
                /*
                 * Instead of directly closing the window,
                 * we're going to change the JOptionPane's
                 * value property.
                 */
                optionPane.setValue(new Integer(
                        JOptionPane.CLOSED_OPTION));
            }
        };

        //Ensure the text field always gets the first focus.
        addComponentListener(new ComponentAdapter() {

            public void componentShown(ComponentEvent ce) {
                mapCombo.requestFocusInWindow();
            }
        });

        //Register an event handler that puts the text into the option pane.
        //mapCombo.addActionListener(this);
        //selectionCombo.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed
        (ActionEvent ae
        
            ) {
                int selection = 0; // selectionCombo.getSelectedIndex();
            DataBaseReader dbr = new DataBaseReader();
            // TODO:  Create test data and actually generate what the selectors would look like.
            // In addition, put in some data that would be retrieval using date, version, release
            switch (selection) {
                case 0:
                    ComboObject current = dbr.getCurrentDateForMap((String) mapCombo.getSelectedItem());
                    selectedDate = current.getDateStr();
                    break;
                case 1:
                    ComboObject baseLine = dbr.getBaseLineDateForMap((String) mapCombo.getSelectedItem());
                    selectedDate = baseLine.getDateStr();
                    break;
                case 2:
                    System.out.println("Get list of dates of map " + mapCombo.getSelectedItem());
                    // TODO:  DataBaseReader.getDatesForMap();
                    Object[] dates = dbr.getDatesForMap((String) mapCombo.getSelectedItem());
                    ComboObject selected = (ComboObject) JOptionPane.showInputDialog(null, "Select a Date", "Dates", JOptionPane.PLAIN_MESSAGE, null, dates, "Current");
                    selectedDate = selected.getDateStr();
                    break;
                case 3:
                    System.out.println("Get list of versions of map " + mapCombo.getSelectedItem());
                    // TODO:  DataBaseReader.getVersionsForMap();
                    Object[] versions = dbr.getVersionsForMap((String) mapCombo.getSelectedItem());
                    selected = (ComboObject) JOptionPane.showInputDialog(null, "Select a Version", "Versions", JOptionPane.PLAIN_MESSAGE, null, versions, "Current");
                    selectedDate = selected.getDateStr();
                    break;
                case 4:
                    System.out.println("Get list of releases of map " + mapCombo.getSelectedItem());
                    Object[] releases = dbr.getReleasesForMap((String) mapCombo.getSelectedItem());
                    selected = (ComboObject) JOptionPane.showInputDialog(null, "Select a Release", "Releases", JOptionPane.PLAIN_MESSAGE, null, releases, "Current");
                    selectedDate = selected.getDateStr();
                    break;
                default:
            }
            System.out.println("Selected Date is: " + selectedDate);
        }
    }
    

    );
        //Register an event handler that reacts to option pane state changes.
        optionPane.addPropertyChangeListener (this);
        pack();
}
/** This method handles events for the text field. */
public void actionPerformed(ActionEvent e) {
        //optionPane.setValue(btnString1);
        setVisible(false);
    }

    /** This method reacts to state changes in the option pane. */
    public void propertyChange(PropertyChangeEvent e) {
        String prop = e.getPropertyName();

        if (isVisible()
                && (e.getSource() == optionPane)
                && (JOptionPane.VALUE_PROPERTY.equals(prop)
                || JOptionPane.INPUT_VALUE_PROPERTY.equals(prop))) {
            Object value = optionPane.getValue();

            if (value == JOptionPane.UNINITIALIZED_VALUE) {
                //ignore reset
                return;
            }

            //Reset the JOptionPane's value.
            //If you don't do this, then if the user
            //presses the same button next time, no
            //property change event will be fired.
            optionPane.setValue(
                    JOptionPane.UNINITIALIZED_VALUE);

            if (btnString1.equals(value)) {
                System.out.println("selected was '" + getMap() + "'");
                System.out.println("Archive type was '" + selectionCombo.getSelectedItem() + "'");
                setVisible(false);
            } else { //user closed dialog or clicked cancel
                clearAndHide();
            }
        }
    }
    

    /** This method clears the dialog and hides it. */
    public void clearAndHide() {
        setVisible(false);
    }

    String getMap() {
        return (String) mapCombo.getSelectedItem();
    }

    private static void createAndShowGUI() {
        //Create and set up the window.
        final JFrame frame = new JFrame("Test Frame");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        JComponent newContentPane = new JPanel();
        JMenuBar menuBar = new JMenuBar();
        JMenu archiveMenu = new JMenu("Archive");
        JMenuItem archiveItem = new JMenuItem("Checkout...");
        archiveItem.addActionListener(new ActionListener() {

            @Override
        public void actionPerformed(ActionEvent ae) {
                String[] maps = DataBaseReader.getListOfMaps();
                CheckOutPanel cop = new CheckOutPanel(frame, maps);
                cop.setVisible(true);
                System.out.println("Value after closing was " + cop.getMap());
                System.out.print("App Done!");
                System.exit(0);
            }
        });
        archiveMenu.add(archiveItem);
        menuBar.add(archiveMenu);
        frame.setJMenuBar(menuBar);
        newContentPane.setPreferredSize(new Dimension(300, 500));
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
               createAndShowGUI();
            }
        });
    }

    public String getSelectedDate() {
        return selectedDate;
    }
}
